{"version":3,"sources":["config.js","App.js","reportWebVitals.js","index.js"],"names":["GOOGLE_CLIENT_CONFIG","apiKey","readMetaTag","clientId","discoveryDocs","scope","join","name","el","document","head","querySelector","content","console","error","App","props","state","isFullscreen","isSignedIn","intervalId","lastFetchedMillis","calendarEvents","script","createElement","src","async","defer","onload","didLoadGoogleApi","appendChild","this","setState","setInterval","pulse","clearInterval","nowMillis","Date","now","fetchCalendarEvents","successCallback","onSuccess","bind","window","gapi","load","auth2","init","then","get","opts","width","height","onsuccess","signin2","render","signOut","location","reload","alert","documentElement","requestFullscreen","exitFullscreen","info","client","calendar","events","list","toISOString","response","i","result","items","displayEvents","length","event","when","start","dateTime","date","push","className","summary","id","onClick","doCloseFullscreen","xmlns","viewBox","fillRule","fill","d","doOpenFullscreen","doLogout","renderCalendarEvents","renderContent","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a08d48c4.chunk.js","sourcesContent":["export const\n\n  GOOGLE_API_KEY = readMetaTag('REACT_APP_GOOGLE_API_KEY'),\n\n  GOOGLE_CLIENT_ID = readMetaTag('REACT_APP_GOOGLE_CLIENT_ID'),\n\n  GOOGLE_SCOPE = [\n    \"https://www.googleapis.com/auth/calendar.events.readonly\",\n    \"https://www.googleapis.com/auth/calendar.readonly\",\n  ].join(\" \"),\n\n  GOOGLE_DISCOVERY_DOCS = [\n    \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"\n  ],\n\n  GOOGLE_CLIENT_CONFIG = {\n    apiKey: GOOGLE_API_KEY,\n    clientId: GOOGLE_CLIENT_ID,\n    discoveryDocs: GOOGLE_DISCOVERY_DOCS,\n    scope: GOOGLE_SCOPE,\n  },\n\n  BEAT_INTERVAL_MILLIS = 1000, // once per second, like a clock\n\n  CACHE_INVALIDATE_MILLIS = 1000 * 60 * 60,\n\n  CALENDAR_FETCH_TO_FUTURE_MILLIS = 1000 * 60 * 60 * 24,\n\n  CALENDAR_FETCH_ROWS_MAX = 99;\n\nfunction readMetaTag(name) {\n  let el = document.head.querySelector(`[name=${name}][content]`);\n  if (el && el.content) return el.content;\n  console.error(\"Cannot retrieve value for META tag named\", name);\n  return \"n/a\";\n}\n","/* global gapi */\nimport React, {Component} from 'react';\nimport './App.css';\nimport {\n  BEAT_INTERVAL_MILLIS,\n  CACHE_INVALIDATE_MILLIS,\n  CALENDAR_FETCH_ROWS_MAX,\n  CALENDAR_FETCH_TO_FUTURE_MILLIS,\n  GOOGLE_CLIENT_CONFIG,\n} from \"./config\";\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFullscreen: false,\n      isSignedIn: false,\n      intervalId: null,\n      lastFetchedMillis: null,\n      calendarEvents: [],\n    }\n  }\n\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n    script.src = \"https://apis.google.com/js/platform.js\";\n    script.async = true;\n    script.defer = true;\n    script.onload = () => {\n      this.didLoadGoogleApi();\n    };\n    /*\n    FUTURE bring back?\n        const meta = document.createElement(\"meta\");\n        meta.name = \"google-signin-client_id\";\n        meta.content = \"%REACT_APP_GOOGLE_ID_OF_WEB_CLIENT%\";\n        document.head.appendChild(meta);\n    */\n    document.head.appendChild(script);\n\n    // Begin Interval\n    this.setState({\n      intervalId: setInterval(() => {\n        this.pulse();\n      }, BEAT_INTERVAL_MILLIS)\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId);\n  }\n\n  // Pulse happens every N milliseconds\n  pulse() {\n    if (!this.state.isSignedIn) return;\n    let nowMillis = Date.now();\n    if (!this.state.lastFetchedMillis || this.state.lastFetchedMillis < nowMillis - CACHE_INVALIDATE_MILLIS) {\n      this.fetchCalendarEvents()\n      this.setState({lastFetchedMillis: nowMillis});\n    }\n  }\n\n  didLoadGoogleApi() {\n    const successCallback = this.onSuccess.bind(this);\n\n    window.gapi.load('auth2', () => {\n      this.auth2 = gapi.auth2.init(GOOGLE_CLIENT_CONFIG)\n      this.auth2.then(() => {\n        this.setState({\n          isSignedIn: this.auth2.isSignedIn.get(),\n        });\n      });\n    });\n    window.gapi.load('signin2', function () {\n      // Method 3: render a sign in button\n      // using this method will show Signed In if the user is already signed in\n      const opts = {\n        ...GOOGLE_CLIENT_CONFIG,\n        width: 200,\n        height: 50,\n        onsuccess: successCallback\n      };\n      gapi.signin2.render('loginButton', opts)\n    })\n  }\n\n  onSuccess() {\n    this.setState({\n      isSignedIn: true,\n    })\n  }\n\n  doLogout() {\n    this.auth2.signOut().then(\n      () => {\n        this.setState({\n          isSignedIn: false,\n          lastFetchedMillis: null,\n        })\n        window.location.reload(false);\n      },\n      () => {\n        alert(\"Failed to sign out!\");\n      }\n    );\n  }\n\n  doOpenFullscreen() {\n    if (document.documentElement.requestFullscreen)\n      document.documentElement.requestFullscreen().then(\n        () => {\n          this.setState({isFullscreen: true})\n        },\n        () => {\n          alert(\"Failed to open in fullscreen mode!\");\n        }\n      );\n    else alert(\"Fullscreen mode not supported in your browser!\");\n  }\n\n  doCloseFullscreen() {\n    if (document.exitFullscreen)\n      document.exitFullscreen().then(\n        () => {\n          this.setState({isFullscreen: false})\n        },\n        () => {\n          alert(\"Failed to close fullscreen mode!\");\n        }\n      );\n    else alert(\"Fullscreen mode not supported in your browser!\");\n  }\n\n  fetchCalendarEvents() {\n    // let today = new Date(); //today date\n    // let userEmail = \"xxx\";\n    // let userTimeZone = \"xxx\";\n\n    console.info(\"Will initialize client\");\n    window.gapi.load('client', () => {\n      gapi.client.init(GOOGLE_CLIENT_CONFIG).then(() => {\n        console.info(\"Will fetch calendar events\");\n        gapi.client.load('calendar', 'v3', () => {\n          gapi.client.calendar.events.list({\n            'calendarId': 'primary',\n            'timeMin': (new Date()).toISOString(),\n            'timeMax': (new Date(Date.now() + CALENDAR_FETCH_TO_FUTURE_MILLIS)).toISOString(),\n            'showDeleted': false,\n            'singleEvents': true,\n            'maxResults': CALENDAR_FETCH_ROWS_MAX,\n            'orderBy': 'startTime'\n          }).then((response) => {\n            let events = response.result.items;\n            let i, displayEvents = [];\n\n            if (events.length > 0) {\n              for (i = 0; i < events.length; i++) {\n                let event = events[i];\n                let when = event.start.dateTime;\n                if (!when) {\n                  when = event.start.date;\n                }\n                displayEvents.push(<div className=\"event\" key={event.id}>{event.summary} ({when})</div>);\n              }\n            } else {\n              displayEvents = [<div className=\"event\">No upcoming events found.</div>];\n            }\n            this.setState({calendarEvents: displayEvents});\n          });\n        });\n      });\n    });\n  }\n\n  renderCalendarEvents() {\n    return (\n      <div>\n        {this.state.calendarEvents}\n      </div>\n    )\n  }\n\n  renderContent() {\n    if (this.state.isSignedIn) {\n      return (\n        <div>\n          {this.state.isFullscreen\n            ?\n            <div id=\"fullscreenButton\" onClick={() => this.doCloseFullscreen()}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n                <title>\n                  Exit Fullscreen Mode\n                </title>\n                <path fillRule=\"evenodd\" fill=\"#ffffff\"\n                      d=\"M7 7V1H5v4H1v2h6zM5 19h2v-6H1v2h4v4zm10-4h4v-2h-6v6h2v-4zm0-8h4V5h-4V1h-2v6h2z\"/>\n              </svg>\n            </div>\n            :\n            <div id=\"fullscreenButton\" onClick={() => this.doOpenFullscreen()}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n                <title>\n                  Enter Fullscreen Mode\n                </title>\n                <path fillRule=\"evenodd\" fill=\"#ffffff\"\n                      d=\"M1 1v6h2V3h4V1H1zm2 12H1v6h6v-2H3v-4zm14 4h-4v2h6v-6h-2v4zm0-16h-4v2h4v4h2V1h-2z\"/>\n              </svg>\n            </div>\n          }\n          <div id=\"logoutButton\" onClick={() => this.doLogout()}>Logout</div>\n          <header className=\"App-header\">\n            <h6>Now</h6>\n            {this.renderCalendarEvents()}\n          </header>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <header className=\"App-header\">\n            <h1>Agendar<sup className=\"tiny\">&trade;</sup></h1>\n            <h2>Heads-Up Display<br/> for being on time.</h2>\n            <button id=\"loginButton\">Login with Google</button>\n          </header>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.renderContent()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}